Question #3: 2D Conveyor Belt

Solution

#include <bits/stdc++.h>
using namespace std;

bool exit(vector<vector<char>>& grid, int start_r, int start_c, set<pair<int, int>>& visited, int n) {
    if (visited.count({start_r, start_c})) {
        return false;
    }

    if (start_r < 0 || start_r >= n || start_c < 0 || start_c >= n) {
        return true;
    }

    visited.insert({start_r, start_c});
    char cell = grid[start_r][start_c];

    if (cell == 'L') {
        return exit(grid, start_r, start_c - 1, visited, n);
    } else if (cell == 'R') {
        return exit(grid, start_r, start_c + 1, visited, n);
    } else if (cell == 'U') {
        return exit(grid, start_r - 1, start_c, visited, n);
    } else if (cell == 'D') {
        return exit(grid, start_r + 1, start_c, visited, n);
    } else { 
        vector<pair<int, int>> directions = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
        for (auto& direction : directions) {
            int next_r = start_r + direction.first;
            int next_c = start_c + direction.second;
            set<pair<int, int>> new_visited = visited;
            if (exit(grid, next_r, next_c, new_visited, n)) {
                return true;
            }
        }
        return false;
    }
}

int count(vector<vector<char>>& grid, int n) {
    int unusable = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            set<pair<int, int>> visited;
            if (!exit(grid, i, j, visited, n)) {
                ++unusable;
            }
        }
    }
    return unusable;
}

void solve() {
    int n, q;
    cin >> n >> q;

    vector<vector<char>> grid(n, vector<char>(n, '?'));

    for (int i = 0; i < q; ++i) {
        int r, c;
        char direction;
        cin >> r >> c >> direction;
        grid[r - 1][c - 1] = direction;
        cout << count(grid, n) << endl;
    }
}

int main() {
    solve();
    return 0;
}
